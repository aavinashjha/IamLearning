from collections import defaultdict
from collections import deque

class Queue:
    def __init__(self):
        self.q = deque()

    def enqueue(self, x):
        self.q.append(x)

    def dequeue(self):
        return self.q.popleft()

    def isEmpty(self):
        return len(self.q) == 0

class Graph:
    def __init__(self):
        self.g = defaultdict(list)

    def edge(self, u, v):
        self.g[u].append(v)

    def __str__(self):
        return "\n".join(["{} -> {}".format(str(k), str(v)) for k, v in self.g.items()])

    def neighbors(self, u):
        return self.g[u]

    def bfs(self, s):
        q = Queue()
        q.enqueue(s)
        sol = list()

        while not q.isEmpty():
            node = q.dequeue()
            sol.append(node)    
            for n in self.neighbors(node):
                q.enqueue(n)
        return sol
    def bfs1(self, s):
        level = dict()
        parent = dict()
        level[s] = 0
        parent[s] = None
        i = 1
        frontier = [s] # level i-1

g = Graph()
g.edge('A', 'B')
g.edge('A', 'C')
g.edge('A', 'D')
g.edge('D', 'B')
print(g)
print("BFS: {}".format(g.bfs('A')))
print("BFS: {}".format(g.bfs('B')))
print("BFS: {}".format(g.bfs('C')))
print("BFS: {}".format(g.bfs('D')))

g = Graph()
g.edge(1, 2)
g.edge(1, 3)
g.edge(1, 4)
g.edge(4, 2)
print(g)
print("BFS: {}".format(g.bfs(1)))
